
<!DOCTYPE html>

<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Flask: Web Forms — Python Beginners  documentation</title>
<script src="_static/js/modernizr.min.js" type="text/javascript"></script>
<script data-url_root="./" id="documentation_options" src="_static/documentation_options.js" type="text/javascript"></script>
<script src="_static/jquery.js" type="text/javascript"></script>
<script src="_static/underscore.js" type="text/javascript"></script>
<script src="_static/doctools.js" type="text/javascript"></script>
<script src="_static/language_data.js" type="text/javascript"></script>
<script async="async" src="https://assets.readthedocs.org/static/javascript/readthedocs-doc-embed.js" type="text/javascript"></script>
<script src="_static/js/theme.js" type="text/javascript"></script>
<link href="_static/css/theme.css" rel="stylesheet" type="text/css"/>
<link href="_static/pygments.css" rel="stylesheet" type="text/css"/>
<link href="genindex.html" rel="index" title="Index"/>
<link href="search.html" rel="search" title="Search"/>
<link href="flask_db1.html" rel="next" title="Flask and Databases"/>
<link href="flask_deploy.html" rel="prev" title="Flask: Deploy an App"/>
<!-- RTD Extra Head -->
<link href="https://assets.readthedocs.org/static/css/readthedocs-doc-embed.css" rel="stylesheet" type="text/css"/>
<script id="READTHEDOCS_DATA" type="application/json">{"ad_free": false, "api_host": "https://readthedocs.org", "build_date": "2021-06-30T15:22:49Z", "builder": "sphinx", "canonical_url": null, "commit": "7ec70bf6", "docroot": "/docs/", "features": {"docsearch_disabled": false}, "global_analytics_code": "UA-17997319-1", "language": "en", "page": "flask_forms", "programming_language": "py", "project": "python-adv-web-apps", "proxied_api_host": "/_", "source_suffix": ".rst", "subprojects": {}, "theme": "sphinx_rtd_theme", "user_analytics_code": "", "version": "latest"}</script>
<!--
Using this variable directly instead of using `JSON.parse` is deprecated.
The READTHEDOCS_DATA global variable will be removed in the future.
-->
<script type="text/javascript">
READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);
</script>
<script async="async" src="https://assets.readthedocs.org/static/javascript/readthedocs-analytics.js" type="text/javascript"></script>
<!-- end RTD <extrahead> -->
</head>
<body class="wy-body-for-nav">
<div class="wy-grid-for-nav">
<nav class="wy-nav-side" data-toggle="wy-nav-shift">
<div class="wy-side-scroll">
<div class="wy-side-nav-search">
<a class="icon icon-home" href="index.html"> Python Beginners
          

          
          </a>
<div class="version">
                latest
              </div>
<div role="search">
<form action="search.html" class="wy-form" id="rtd-search-form" method="get">
<input name="q" placeholder="Search docs" type="text"/>
<input name="check_keywords" type="hidden" value="yes"/>
<input name="area" type="hidden" value="default"/>
</form>
</div>
</div>
<div aria-label="main navigation" class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation">
<p class="caption"><span class="caption-text">Contents</span></p>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="learn_python.html">Starting Python</a></li>
<li class="toctree-l1"><a class="reference internal" href="functions.html">Functions in Python</a></li>
<li class="toctree-l1"><a class="reference internal" href="lists.html">Working with Lists</a></li>
<li class="toctree-l1"><a class="reference internal" href="working_with_files.html">Reading and Writing Files</a></li>
<li class="toctree-l1"><a class="reference internal" href="dicts.html">Dictionaries</a></li>
<li class="toctree-l1"><a class="reference internal" href="csv.html">CSV Files</a></li>
<li class="toctree-l1"><a class="reference internal" href="scraping.html">Web Scraping Intro</a></li>
<li class="toctree-l1"><a class="reference internal" href="scraping2.html">Web Scraping, Part 2</a></li>
<li class="toctree-l1"><a class="reference internal" href="scraping3.html">Web Scraping, Part 3</a></li>
<li class="toctree-l1"><a class="reference internal" href="flask.html">Flask Intro</a></li>
<li class="toctree-l1"><a class="reference internal" href="flask2.html">Flask, Part 2</a></li>
<li class="toctree-l1"><a class="reference internal" href="flask3.html">Flask Templates</a></li>
<li class="toctree-l1"><a class="reference internal" href="flask_deploy.html">Flask: Deploy an App</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Flask: Web Forms</a><ul>
<li class="toctree-l2"><a class="reference internal" href="#introduction">Introduction</a></li>
<li class="toctree-l2"><a class="reference internal" href="#setup-for-using-forms-in-flask">Setup for using forms in Flask</a></li>
<li class="toctree-l2"><a class="reference internal" href="#imports-for-forms-with-flask-wtf-and-flask-bootstrap">Imports for forms with Flask-WTF and Flask-Bootstrap</a></li>
<li class="toctree-l2"><a class="reference internal" href="#set-up-a-form-in-a-flask-app">Set up a form in a Flask app</a><ul>
<li class="toctree-l3"><a class="reference internal" href="#configure-the-form">Configure the form</a></li>
<li class="toctree-l3"><a class="reference internal" href="#put-the-form-in-a-route-function">Put the form in a route function</a></li>
<li class="toctree-l3"><a class="reference internal" href="#put-the-form-in-a-template">Put the form in a template</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="#a-quick-note-about-bootstrap-in-flask">A quick note about Bootstrap in Flask</a></li>
<li class="toctree-l2"><a class="reference internal" href="#examining-the-route-function">Examining the route function</a></li>
<li class="toctree-l2"><a class="reference internal" href="#conclusion">Conclusion</a></li>
<li class="toctree-l2"><a class="reference internal" href="#resources">Resources</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flask_db1.html">Flask and Databases</a></li>
<li class="toctree-l1"><a class="reference internal" href="flask_db2.html">Flask: Read from a Database</a></li>
<li class="toctree-l1"><a class="reference internal" href="flask_db3.html">Flask: Write to a Database</a></li>
<li class="toctree-l1"><a class="reference internal" href="configparser.html">configparser</a></li>
</ul>
</div>
</div>
</nav>
<section class="wy-nav-content-wrap" data-toggle="wy-nav-shift">
<nav aria-label="top navigation" class="wy-nav-top">
<i class="fa fa-bars" data-toggle="wy-nav-top"></i>
<a href="index.html">Python Beginners</a>
</nav>
<div class="wy-nav-content">
<div class="rst-content">
<div aria-label="breadcrumbs navigation" role="navigation">
<ul class="wy-breadcrumbs">
<li><a href="index.html">Docs</a> »</li>
<li>Flask: Web Forms</li>
<li class="wy-breadcrumbs-aside">
<a class="fa fa-github" href="https://github.com/macloo/python-adv-web-apps/blob/master/docs/flask_forms.rst"> Edit on GitHub</a>
</li>
</ul>
<hr/>
</div>
<div class="document" itemscope="itemscope" itemtype="http://schema.org/Article" role="main">
<div itemprop="articleBody">
<div class="section" id="flask-web-forms">
<h1>Flask: Web Forms<a class="headerlink" href="#flask-web-forms" title="Permalink to this headline">Â¶</a></h1>
<p>Previous:</p>
<ol class="arabic simple">
<li><p><a class="reference external" href="flask.html">Flask intro</a>: A very simple Flask app</p></li>
<li><p><a class="reference external" href="flask2.html">Flask, part 2</a>: Values in routes; using an API</p></li>
<li><p><a class="reference external" href="flask3.html">Flask templates</a>: Write HTML templates for a Flask app</p></li>
<li><p><a class="reference external" href="flask_deploy.html">Flask: Deploy an app</a>: How to put your finished app online</p></li>
</ol>
<p>Code for this chapter is <a class="reference external" href="https://github.com/macloo/python-adv-web-apps/tree/master/python_code_examples/flask">here</a>.</p>
<p>In the <strong>Flask Templates</strong> chapter, we built a functioning Flask app. In this chapter, weâll explore how to add functional web forms to a similar app.</p>
<div class="figure align-default">
<img alt="Actors app screenshots" src="_images/actors_app.png"/>
</div>
<p><strong>Flask forms app example</strong> (<em>actors_app</em>):</p>
<ul class="simple">
<li><p><a class="reference external" href="https://weimergeeks.com/flaskform/">Live app</a></p></li>
<li><p><a class="reference external" href="https://github.com/macloo/python-adv-web-apps/tree/master/python_code_examples/flask/actors_app">Code</a></p></li>
</ul>
<div class="section" id="introduction">
<h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">Â¶</a></h2>
<p>Flask has an extension that makes it easy to create web forms.</p>
<p>WTForms is âa flexible forms validation and rendering library for Python Web development.â With <strong>Flask-WTF,</strong> we get WTForms in Flask.</p>
<ul class="simple">
<li><p>WTForms includes security features for submitting form data.</p></li>
<li><p>WTForms has built-in validation techniques.</p></li>
<li><p>WTForms can be combined with Bootstrap to help us make clean-looking, responsive forms for mobile and desktop screens.</p></li>
</ul>
<p><a class="reference external" href="https://flask-wtf.readthedocs.io/en/stable/">Read the documentation for Flask-WTF.</a></p>
</div>
<div class="section" id="setup-for-using-forms-in-flask">
<h2>Setup for using forms in Flask<a class="headerlink" href="#setup-for-using-forms-in-flask" title="Permalink to this headline">Â¶</a></h2>
<p>We will install the <strong>Flask-WTF</strong> extension to help us work with forms in Flask. There are many extensions for Flask, and each one adds a different set of functions and capabilities. See the <a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/extensions/">list of Flask extensions</a> for more.</p>
<p>In Terminal, change into your Flask projects folder and <strong>activate your virtual environment</strong> there. Then, at the command prompt â where you see <code class="docutils literal notranslate"><span class="pre">$</span></code> (Mac) or <code class="docutils literal notranslate"><span class="pre">C:\Users\yourname&gt;</span></code> (Windows )â</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">pip</span> <span class="n">install</span> <span class="n">Flask</span><span class="o">-</span><span class="n">WTF</span>
</pre></div>
</div>
<p>We will also install the <strong>Flask-Bootstrap4</strong> extension to provide Bootstrap styles for our forms.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">pip</span> <span class="n">install</span> <span class="n">Flask</span><span class="o">-</span><span class="n">Bootstrap4</span>
</pre></div>
</div>
<p>This installation is done <em>only once</em> in any virtualenv. It is assumed you already have Flask installed there.</p>
<ul class="simple">
<li><p><a class="reference external" href="https://flask-wtf.readthedocs.io/en/stable/">Flask-WTF docs</a></p></li>
<li><p>More details in <a class="reference external" href="https://wtforms.readthedocs.io/en/stable/">WTForms docs</a></p></li>
<li><p><a class="reference external" href="https://pythonhosted.org/Flask-Bootstrap/">Flask-Bootstrap docs</a></p></li>
<li><p>An <em>alternative</em> is <a class="reference external" href="https://bootstrap-flask.readthedocs.io/en/latest/">Bootstrap Flask</a> â but that is NOT used here</p></li>
</ul>
</div>
<div class="section" id="imports-for-forms-with-flask-wtf-and-flask-bootstrap">
<h2>Imports for forms with Flask-WTF and Flask-Bootstrap<a class="headerlink" href="#imports-for-forms-with-flask-wtf-and-flask-bootstrap" title="Permalink to this headline">Â¶</a></h2>
<p>You will have a long list of imports at the top of your Flask app file:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">url_for</span>
<span class="kn">from</span> <span class="nn">flask_bootstrap</span> <span class="kn">import</span> <span class="n">Bootstrap</span>
<span class="kn">from</span> <span class="nn">flask_wtf</span> <span class="kn">import</span> <span class="n">FlaskForm</span>
<span class="kn">from</span> <span class="nn">wtforms</span> <span class="kn">import</span> <span class="n">StringField</span><span class="p">,</span> <span class="n">SubmitField</span>
<span class="kn">from</span> <span class="nn">wtforms.validators</span> <span class="kn">import</span> <span class="n">DataRequired</span>
</pre></div>
</div>
<p>Note as always that Python is case-sensitive, so upper- and lowercase must be used exactly as shown. <strong>The fourth line will change</strong> depending on <strong>your formâs contents.</strong> For example, if you have a SELECT element, youâll need to import that. <a class="reference external" href="https://github.com/macloo/python-adv-web-apps/blob/master/python_code_examples/flask/forms/WTForms-field-types.csv">See the complete list</a> of WTForms form field types.</p>
</div>
<div class="section" id="set-up-a-form-in-a-flask-app">
<h2>Set up a form in a Flask app<a class="headerlink" href="#set-up-a-form-in-a-flask-app" title="Permalink to this headline">Â¶</a></h2>
<p>After the imports, these lines follow in the app script:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="c1"># Flask-WTF requires an encryption key - the string can be anything</span>
<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">'SECRET_KEY'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'C2HWGVoMGfNTBsrYQg8EcMrdTimkZfAb'</span>

<span class="c1"># Flask-Bootstrap requires this line</span>
<span class="n">Bootstrap</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</pre></div>
</div>
<p>Flask allows us to set a âsecret keyâ value. You can grab a string from a site such as <a class="reference external" href="https://randomkeygen.com/">RandomKeygen</a>. This value is used to prevent malicious hijacking of your form from an outside submission.</p>
<p>Flask-WTFâs <code class="docutils literal notranslate"><span class="pre">FlaskForm</span></code> will automatically create a secure session with CSRF (cross-site request forgery) protection <em>if this key-value is set.</em> <strong>Donât publish the actual key on GitHub!</strong></p>
<p>You can read more about <code class="docutils literal notranslate"><span class="pre">app.config['SECRET_KEY']</span></code> in this <a class="reference external" href="https://stackoverflow.com/questions/22463939/demystify-flask-app-secret-key">StackOverflow post</a>.</p>
<div class="section" id="configure-the-form">
<h3>Configure the form<a class="headerlink" href="#configure-the-form" title="Permalink to this headline">Â¶</a></h3>
<p>Next, we configure a form that inherits from Flask-WTFâs class <code class="docutils literal notranslate"><span class="pre">FlaskForm</span></code>. Python style dictates that a <strong>class</strong> starts with an uppercase letter and uses <a class="reference external" href="https://www.computerhope.com/jargon/c/camelcase.htm">camelCase</a>, so here our new class is named <code class="docutils literal notranslate"><span class="pre">NameForm</span></code> (we will use the form to search for a name).</p>
<p>In the class, we assign each form control to a unique variable. This form has only one text input field and one submit button.</p>
<p><strong>Every form control</strong> must be configured here.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">NameForm</span><span class="p">(</span><span class="n">FlaskForm</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">StringField</span><span class="p">(</span><span class="s1">'Which actor is your favorite?'</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">DataRequired</span><span class="p">()])</span>
    <span class="n">submit</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s1">'Submit'</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference external" href="https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes">Learn more about classes in Python here.</a></p>
<p>If you had <strong>more than one form</strong> in the app, you would define more than one new class in this manner.</p>
<p>Note that <code class="docutils literal notranslate"><span class="pre">StringField</span></code> and <code class="docutils literal notranslate"><span class="pre">SubmitField</span></code> were <strong>imported</strong> at the top of the file. If we needed other form-control types in this form, we would need to import those also. <a class="reference external" href="https://github.com/macloo/python-adv-web-apps/blob/master/python_code_examples/flask/forms/WTForms-field-types.csv">See a list of all WTForms field types.</a></p>
<p>Note that several field types (such as <code class="docutils literal notranslate"><span class="pre">RadioField</span></code> and <code class="docutils literal notranslate"><span class="pre">SelectField</span></code>) must have an option <code class="docutils literal notranslate"><span class="pre">choices=[]</span></code> specified, after the label text. Within the list, each choice is a pair in this format: <code class="docutils literal notranslate"><span class="pre">('string1',</span> <span class="pre">'string2')</span></code>.</p>
<p>WTForms also has a long list of <a class="reference external" href="https://github.com/macloo/python-adv-web-apps/blob/master/python_code_examples/flask/forms/WTForms-validators.csv">validators</a> we can use. The <code class="docutils literal notranslate"><span class="pre">DataRequired()</span></code> validator prevents the form from being submitted if that field is empty. Note that these validators must also be imported at the top of the file.</p>
</div>
<div class="section" id="put-the-form-in-a-route-function">
<h3>Put the form in a route function<a class="headerlink" href="#put-the-form-in-a-route-function" title="Permalink to this headline">Â¶</a></h3>
<p>Now we will use the form in a Flask route:</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">../python_code_examples/flask/actors_app/actors.py</span><a class="headerlink" href="#id1" title="Permalink to this code">Â¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">'GET'</span><span class="p">,</span> <span class="s1">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="n">names</span> <span class="o">=</span> <span class="n">get_names</span><span class="p">(</span><span class="n">ACTORS</span><span class="p">)</span>
    <span class="c1"># you must tell the variable 'form' what you named the class, above</span>
    <span class="c1"># 'form' is the variable name used in this template: index.html</span>
<span class="hll">    <span class="n">form</span> <span class="o">=</span> <span class="n">NameForm</span><span class="p">()</span>
</span>    <span class="n">message</span> <span class="o">=</span> <span class="s2">""</span>
    <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">data</span>
        <span class="k">if</span> <span class="n">name</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
            <span class="c1"># empty the form field</span>
            <span class="n">form</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="s2">""</span>
            <span class="nb">id</span> <span class="o">=</span> <span class="n">get_id</span><span class="p">(</span><span class="n">ACTORS</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="c1"># redirect the browser to another route and template</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span> <span class="n">url_for</span><span class="p">(</span><span class="s1">'actor'</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">)</span> <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">message</span> <span class="o">=</span> <span class="s2">"That actor is not in our database."</span>
<span class="hll">    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">'index.html'</span><span class="p">,</span> <span class="n">names</span><span class="o">=</span><span class="n">names</span><span class="p">,</span> <span class="n">form</span><span class="o">=</span><span class="n">form</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
</span></pre></div>
</td></tr></table></div>
</div>
<p>A crucial line is where we assign our configured form object to a new variable:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">form</span> <span class="o">=</span> <span class="n">NameForm</span><span class="p">()</span>
</pre></div>
</div>
<p>We must also pass that variable to the template, as seen in the final line above.</p>
<p>Be aware that if we had created <strong>more than one</strong> form class, each of those would need to be assigned to a unique variable.</p>
</div>
<div class="section" id="put-the-form-in-a-template">
<h3>Put the form in a template<a class="headerlink" href="#put-the-form-in-a-template" title="Permalink to this headline">Â¶</a></h3>
<p>Before we break all that down and explain it, letâs look at the code in the template <em>index.html</em>:</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">../python_code_examples/flask/actors_app/templates/index.html</span><a class="headerlink" href="#id2" title="Permalink to this code">Â¶</a></div>
<div class="highlight-jinja notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">extends</span> <span class="s1">'bootstrap/base.html'</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">import</span> <span class="s2">"bootstrap/wtf.html"</span> <span class="k">as</span> <span class="nv">wtf</span> <span class="cp">%}</span><span class="x"></span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">styles</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nb">super</span><span class="o">()</span> <span class="cp">}}</span><span class="x"></span>
<span class="x">	&lt;style&gt;</span>
<span class="x">		body { background: #e8f1f9; }</span>
<span class="x">	&lt;/style&gt;</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>


<span class="cp">{%</span> <span class="k">block</span> <span class="nv">title</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">Best Movie Actors</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>


<span class="cp">{%</span> <span class="k">block</span> <span class="nv">content</span> <span class="cp">%}</span><span class="x"></span>

<span class="x">&lt;div class="container"&gt;</span>
<span class="x">  &lt;div class="row"&gt;</span>
<span class="x">    &lt;div class="col-md-10 col-lg-8 mx-lg-auto mx-md-auto"&gt;</span>

<span class="x">      &lt;h1 class="pt-5 pb-2"&gt;Welcome to the best movie actors Flask example!&lt;/h1&gt;</span>

<span class="x">      &lt;p class="lead"&gt;This is the index page for an example Flask app using Bootstrap and WTForms. Note that only 100 actors are in the data source. Partial names are not valid.&lt;/p&gt;</span>

<span class="hll"><span class="x">      </span><span class="cp">{{</span> <span class="nv">wtf.quick_form</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</span>
<span class="x">      &lt;p class="pt-5"&gt;&lt;strong&gt;</span><span class="cp">{{</span> <span class="nv">message</span> <span class="cp">}}</span><span class="x">&lt;/strong&gt;&lt;/p&gt;</span>

<span class="x">    &lt;/div&gt;</span>
<span class="x">  &lt;/div&gt;</span>
<span class="x">&lt;/div&gt;</span>

<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<p><strong>Where is the form?</strong> This is the amazing thing about Flask-WTF â by configuring the form as we did <em>in the Flask app,</em> we can generate a form with Bootstrap styles in HTML using nothing more than the template you see above. <strong>Line 27 is the form.</strong></p>
<div class="figure align-default">
<img alt="Drawing of magician pulling rabbit from hat" src="_images/rabbit_hat.png"/>
</div>
<p>Note that in the Flask route function, we passed the variable <code class="docutils literal notranslate"><span class="pre">form</span></code> to the template <em>index.html</em>:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">'index.html'</span><span class="p">,</span> <span class="n">names</span><span class="o">=</span><span class="n">names</span><span class="p">,</span> <span class="n">form</span><span class="o">=</span><span class="n">form</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
</pre></div>
</div>
<p>So when you use <code class="docutils literal notranslate"><span class="pre">wtf.quick_form()</span></code>, the argument inside the parentheses <strong>must</strong> be the <em>variable</em> that represents the form you created in the app.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">form</span> <span class="o">=</span> <span class="n">NameForm</span><span class="p">()</span>
</pre></div>
</div>
<p>We discussed the configuration of <code class="docutils literal notranslate"><span class="pre">NameForm</span></code> above.</p>
</div>
</div>
<div class="section" id="a-quick-note-about-bootstrap-in-flask">
<h2>A quick note about Bootstrap in Flask<a class="headerlink" href="#a-quick-note-about-bootstrap-in-flask" title="Permalink to this headline">Â¶</a></h2>
<p>Thereâs more about this in the <strong>Resources</strong> section at the bottom of this page â but to summarize briefly:</p>
<ul class="simple">
<li><p>You pip-installed Flask-Bootstrap4 in your Flask virtual environment.</p></li>
<li><p>You wrote <code class="docutils literal notranslate"><span class="pre">from</span> <span class="pre">flask_bootstrap</span> <span class="pre">import</span> <span class="pre">Bootstrap</span></code> at the top of the Flask app file.</p></li>
<li><p>Below that, you wrote <code class="docutils literal notranslate"><span class="pre">Bootstrap(app)</span></code> in the Flask app file.</p></li>
<li><p>In any Flask template using Bootstrap styles, the top line will be: <code class="docutils literal notranslate"><span class="pre">{%</span> <span class="pre">extends</span> <span class="pre">'bootstrap/base.html'</span> <span class="pre">%}</span></code></p></li>
</ul>
<p>That combination of four things has embedded Bootstrap 4 in this app <em>and</em> made <code class="docutils literal notranslate"><span class="pre">wtf.quick_form()</span></code> possible.</p>
<p>Thereâs an <a class="reference external" href="https://www.youtube.com/watch?v=PE9ZGniSDW8">excellent how-to video</a> (only 9 minutes long) about using Bootstrap styles in Flask if you want to separate the <strong>forms</strong> information from the Bootstrap information in your mind. You can, of course, use Flask-Bootstrap4 <em>without</em> the forms!</p>
</div>
<div class="section" id="examining-the-route-function">
<h2>Examining the route function<a class="headerlink" href="#examining-the-route-function" title="Permalink to this headline">Â¶</a></h2>
<p>Before reading further, try out a <a class="reference external" href="https://weimergeeks.com/flaskform/">working version of this app</a>. The complete code for the app is in the folder named <a class="reference external" href="https://github.com/macloo/python-adv-web-apps/tree/master/python_code_examples/flask/actors_app">actors_app</a>.</p>
<ol class="arabic simple">
<li><p>You type an actorâs name into the form and submit it.</p></li>
<li><p>If the actorâs name is in the data source (ACTORS), the app loads a detail page for that actor. (Photos of bears ð» stand in for real photos of the actors.)</p></li>
<li><p>Otherwise, you stay on the same page, the form is cleared, and a message tells you that actor is not in the database.</p></li>
</ol>
<div class="literal-block-wrapper docutils container" id="id3">
<div class="code-block-caption"><span class="caption-text">../python_code_examples/flask/actors_app/actors.py</span><a class="headerlink" href="#id3" title="Permalink to this code">Â¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">'GET'</span><span class="p">,</span> <span class="s1">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="n">names</span> <span class="o">=</span> <span class="n">get_names</span><span class="p">(</span><span class="n">ACTORS</span><span class="p">)</span>
    <span class="c1"># you must tell the variable 'form' what you named the class, above</span>
    <span class="c1"># 'form' is the variable name used in this template: index.html</span>
    <span class="n">form</span> <span class="o">=</span> <span class="n">NameForm</span><span class="p">()</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s2">""</span>
    <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">data</span>
        <span class="k">if</span> <span class="n">name</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
            <span class="c1"># empty the form field</span>
            <span class="n">form</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="s2">""</span>
            <span class="nb">id</span> <span class="o">=</span> <span class="n">get_id</span><span class="p">(</span><span class="n">ACTORS</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="c1"># redirect the browser to another route and template</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span> <span class="n">url_for</span><span class="p">(</span><span class="s1">'actor'</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">)</span> <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">message</span> <span class="o">=</span> <span class="s2">"That actor is not in our database."</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">'index.html'</span><span class="p">,</span> <span class="n">names</span><span class="o">=</span><span class="n">names</span><span class="p">,</span> <span class="n">form</span><span class="o">=</span><span class="n">form</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>First we have the route, as usual, but with a new addition for handling form data: <code class="docutils literal notranslate"><span class="pre">methods</span></code>.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">'GET'</span><span class="p">,</span> <span class="s1">'POST'</span><span class="p">])</span>
</pre></div>
</div>
<p>Every HTML form has two possible methods, <code class="docutils literal notranslate"><span class="pre">GET</span></code> and <code class="docutils literal notranslate"><span class="pre">POST</span></code>. <code class="docutils literal notranslate"><span class="pre">GET</span></code> simply requests a response from the server. <code class="docutils literal notranslate"><span class="pre">POST</span></code>, however, sends a request <strong>with data attached</strong> in the body of the request; this is the way most web forms are submitted.</p>
<p><strong>This route needs to use both methods</strong> because when we simply <em>open the page,</em> no form was submitted, and weâre opening it with <code class="docutils literal notranslate"><span class="pre">GET</span></code>. When we submit the form, this same page is opened with <code class="docutils literal notranslate"><span class="pre">POST</span></code> if the actorâs name (the form data) was not found. Thus we cannot use only one of the two options here.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="n">names</span> <span class="o">=</span> <span class="n">get_names</span><span class="p">(</span><span class="n">ACTORS</span><span class="p">)</span>
</pre></div>
</div>
<p>At the start of the route function, we get the data source for this app. It happens to be in a list named <code class="docutils literal notranslate"><span class="pre">ACTORS</span></code>, and we get just the names by running a function, <code class="docutils literal notranslate"><span class="pre">get_names()</span></code>. The function was imported from the file named <em>modules.py.</em></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">form</span> <span class="o">=</span> <span class="n">NameForm</span><span class="p">()</span>
<span class="n">message</span> <span class="o">=</span> <span class="s2">""</span>
</pre></div>
</div>
<p>We assign the previously configured form object, <code class="docutils literal notranslate"><span class="pre">NameForm()</span></code>, to a new variable, <code class="docutils literal notranslate"><span class="pre">form</span></code>. This has been discussed above.</p>
<p>We create a new, empty variable, <code class="docutils literal notranslate"><span class="pre">message</span></code>.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">data</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">validate_on_submit()</span></code> is a built-in WTForms function, called on <code class="docutils literal notranslate"><span class="pre">form</span></code> (our variable). <strong>If it returns True,</strong> the following commands and statements in the block will run. If not, the form is simply not submitted, and invalid fields are flagged. It will return True if the form was filled in and submitted.</p>
<p><code class="docutils literal notranslate"><span class="pre">form.name.data</span></code> is the contents of the text input field represented by <code class="docutils literal notranslate"><span class="pre">name</span></code>. Perhaps we should review how we configured the form:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">NameForm</span><span class="p">(</span><span class="n">FlaskForm</span><span class="p">):</span>
   <span class="n">name</span> <span class="o">=</span> <span class="n">StringField</span><span class="p">(</span><span class="s1">'Which actor is your favorite?'</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">DataRequired</span><span class="p">()])</span>
   <span class="n">submit</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s1">'Submit'</span><span class="p">)</span>
</pre></div>
</div>
<p>That <code class="docutils literal notranslate"><span class="pre">name</span></code> is the <code class="docutils literal notranslate"><span class="pre">name</span></code> in <code class="docutils literal notranslate"><span class="pre">form.name.data</span></code> â the contents of which we will now store in a new variable, <code class="docutils literal notranslate"><span class="pre">name</span></code>. To put it another way: The variable <code class="docutils literal notranslate"><span class="pre">name</span></code> <em>in the app</em> now contains whatever the user typed into the text input field on the web page â that is, the actorâs name.</p>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>36
37
38
39
40
41
42
43</pre></div></td><td class="code"><div class="highlight"><pre><span></span>        <span class="k">if</span> <span class="n">name</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
            <span class="c1"># empty the form field</span>
            <span class="n">form</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="s2">""</span>
            <span class="nb">id</span> <span class="o">=</span> <span class="n">get_id</span><span class="p">(</span><span class="n">ACTORS</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="c1"># redirect the browser to another route and template</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span> <span class="n">url_for</span><span class="p">(</span><span class="s1">'actor'</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">)</span> <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">message</span> <span class="o">=</span> <span class="s2">"That actor is not in our database."</span>
</pre></div>
</td></tr></table></div>
<p>This if-statement is specific to this app. It checks whether the <code class="docutils literal notranslate"><span class="pre">name</span></code> (that was typed into the form) matches any name in the list <code class="docutils literal notranslate"><span class="pre">names</span></code>. If not, we jump down to <code class="docutils literal notranslate"><span class="pre">else</span></code> and text is put into the variable <code class="docutils literal notranslate"><span class="pre">message</span></code>. If <code class="docutils literal notranslate"><span class="pre">name</span></code> DOES match, we clear out the form, run a function called <code class="docutils literal notranslate"><span class="pre">get_id()</span></code> (from <em>modules.py</em>) and â <strong>important!</strong> â open a <em>different route</em> in this app:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">return</span> <span class="n">redirect</span><span class="p">(</span> <span class="n">url_for</span><span class="p">(</span><span class="s1">'actor'</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">)</span> <span class="p">)</span>
</pre></div>
</div>
<p>Thus <code class="docutils literal notranslate"><span class="pre">redirect(</span> <span class="pre">url_for('actor',</span> <span class="pre">id=id)</span> <span class="pre">)</span></code> is calling a different route here in the same Flask app script. (See <em>actors.py,</em> lines 46-55.) The <code class="docutils literal notranslate"><span class="pre">redirect()</span></code> function is specifically for this use, and we <strong>imported</strong> it from the <code class="docutils literal notranslate"><span class="pre">flask</span></code> module at the top of the app. We also imported <code class="docutils literal notranslate"><span class="pre">url_for()</span></code>, which you have seen previously used within templates.</p>
<p>As far as <strong>using forms with Flask</strong> is concerned, you donât need to worry about the actors and their IDs, etc. What is important is that <strong>the route function</strong> can be used to <em>evaluate the data sent from the form.</em> We check to see whether it matched any of the actors in a list, and <em>a different response</em> will be sent based on match or no match.</p>
<p>Any kind of form data can be handled in a Flask route function.</p>
<p>You can do <em>any</em> of the things that are typically done with HTML forms â handle usernames and passwords, write new data to a database, create a quiz, etc.</p>
<p>The final line in the route function calls the template <em>index.html</em> and passes three variables to it:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">'index.html'</span><span class="p">,</span> <span class="n">names</span><span class="o">=</span><span class="n">names</span><span class="p">,</span> <span class="n">form</span><span class="o">=</span><span class="n">form</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="conclusion">
<h2>Conclusion<a class="headerlink" href="#conclusion" title="Permalink to this headline">Â¶</a></h2>
<p><strong>Flask-WTF</strong> provides convenient methods for working with forms in Flask. Forms can be built easily and also processed easily, with a minimum of code.</p>
<p>Adding <strong>Flask-Bootstrap</strong> ensures that we can build mobile-friendly forms with a minimum amount of effort.</p>
<p>Note that it is possible to build a customized form layout using Bootstrap 4 styles in a Flask template, or to build a custom form with no Bootstrap styles. In either case, you cannot use <code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">wtf.quick_form(form)</span> <span class="pre">}}</span></code> but would instead write out all the form code in your Flask template as you would in a normal HTML file. To take advantage of WTForms, you would still create the form class with <code class="docutils literal notranslate"><span class="pre">FlaskForm</span></code> in the same way as shown above.</p>
<p>An example is the demo Flask app <a class="reference external" href="https://books-hopper.herokuapp.com/">Books Hopper</a>, which includes four separate Bootstrap forms:</p>
<ul class="simple">
<li><p>a login form</p></li>
<li><p>a registration form</p></li>
<li><p>a search form</p></li>
<li><p>a form for writing a book review and selecting a rating</p></li>
</ul>
<div class="figure align-default">
<img alt="Books Hopper screenshot" src="_images/books_hopper.png"/>
</div>
<p>Bootstrap 4 was used in all templates in the Books Hopper app, but Flask-Bootstrap was not.</p>
<div class="admonition important">
<p class="admonition-title">Important</p>
<p>You are using Bootstrap 4 in Flask if you installed with <code class="docutils literal notranslate"><span class="pre">pip</span> <span class="pre">install</span> <span class="pre">Flask-Bootstrap4</span></code>. In early 2018, Bootstrap 4 replaced Bootstrap 3. The differences are significant.</p>
</div>
</div>
<div class="section" id="resources">
<h2>Resources<a class="headerlink" href="#resources" title="Permalink to this headline">Â¶</a></h2>
<ul class="simple">
<li><p><a class="reference external" href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data">Sending form data</a> â how web browsers interact with servers; request/response</p></li>
<li><p><a class="reference external" href="https://flask-wtf.readthedocs.io/en/stable/">Flask-WTF documentation</a></p></li>
<li><p><a class="reference external" href="https://wtforms.readthedocs.io/en/stable/">Complete WTForms documentation</a></p></li>
<li><p><a class="reference external" href="https://pythonhosted.org/Flask-Bootstrap/">Flask-Bootstrap documentation</a></p></li>
<li><p><a class="reference external" href="https://pythonhosted.org/Flask-Bootstrap/basic-usage.html#templates">About Flask-Bootstrap templates</a></p></li>
</ul>
<p>.</p>
</div>
</div>
</div>
</div>
<footer>
<div aria-label="footer navigation" class="rst-footer-buttons" role="navigation">
<a accesskey="n" class="btn btn-neutral float-right" href="flask_db1.html" rel="next" title="Flask and Databases">Next <span class="fa fa-arrow-circle-right"></span></a>
<a accesskey="p" class="btn btn-neutral float-left" href="flask_deploy.html" rel="prev" title="Flask: Deploy an App"><span class="fa fa-arrow-circle-left"></span> Previous</a>
</div>
<hr/>
<div role="contentinfo">
<p>
        © Copyright 2020 Mindy McAdams
      
        <span class="commit">
          Revision <code>7ec70bf6</code>.
        </span>
</p>
</div>
  Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/rtfd/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>. 

</footer>
</div>
</div>
</section>
</div>
<div aria-label="versions" class="rst-versions" data-toggle="rst-versions" role="note">
<span class="rst-current-version" data-toggle="rst-current-version">
<span class="fa fa-book"> Read the Docs</span>
      v: latest
      <span class="fa fa-caret-down"></span>
</span>
<div class="rst-other-versions">
<dl>
<dt>Versions</dt>
<dd><a href="/en/latest/">latest</a></dd>
</dl>
<dl>
<dt>Downloads</dt>
<dd><a href="//python-adv-web-apps.readthedocs.io/_/downloads/en/latest/pdf/">pdf</a></dd>
<dd><a href="//python-adv-web-apps.readthedocs.io/_/downloads/en/latest/htmlzip/">html</a></dd>
<dd><a href="//python-adv-web-apps.readthedocs.io/_/downloads/en/latest/epub/">epub</a></dd>
</dl>
<dl>
<dt>On Read the Docs</dt>
<dd>
<a href="//readthedocs.org/projects/python-adv-web-apps/?fromdocs=python-adv-web-apps">Project Home</a>
</dd>
<dd>
<a href="//readthedocs.org/builds/python-adv-web-apps/?fromdocs=python-adv-web-apps">Builds</a>
</dd>
</dl>
<hr/>
      Free document hosting provided by <a href="http://www.readthedocs.org">Read the Docs</a>.

    </div>
</div>
<script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.Navigation.enable(true);
      });
  </script>
</body>
</html>